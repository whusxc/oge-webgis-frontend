import { defineStore } from 'pinia'
import { ref, reactive } from 'vue'

export const useAppStore = defineStore('app', () => {
  // Â∫îÁî®Áä∂ÊÄÅ
  const loading = ref(false)
  const initialized = ref(false)
  
  // Áî®Êà∑‰ø°ÊÅØ
  const user = reactive({
    id: null,
    username: '',
    token: '',
    isLoggedIn: false
  })
  
  // Â∫îÁî®ÈÖçÁΩÆ
  const config = reactive({
    // Á≥ªÁªüÁä∂ÊÄÅ
    system: {
      offlineMode: true, // ÂΩìÂâç‰∏∫Á¶ªÁ∫øÊ®°Âºè
      networkStatus: 'offline',
      lastConnectAttempt: null
    },
    
    // Mapbox ÈÖçÁΩÆ
    mapbox: {
      accessToken: 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [116.3974, 39.9093], // Âåó‰∫¨ÂùêÊ†á
      zoom: 10
    },
    
    // MCPÊúçÂä°ÈÖçÁΩÆÔºàÈúÄË¶ÅÂÜÖÁΩëÔºâ
    mcp: {
      baseUrl: import.meta.env.DEV ? '/api/mcp' : 'http://localhost:8000',
      timeout: 30000,
      connected: false,
      lastHealthCheck: null
    },
    
    // OGEÊúçÂä°ÈÖçÁΩÆÔºà‰ΩøÁî®ÂèØÁî®ÁöÑÂ§ñÁΩëÁ©øÈÄèÊúçÂä°Âô®Ôºâ
    oge: {
      baseUrl: import.meta.env.DEV ? '/api/oge' : 'http://111.37.195.111:7002',
      timeout: 30000,
      connected: false,
      lastHealthCheck: null
    },
    
    // Êô∫ËÉΩÂä©ÊâãÈÖçÁΩÆ
    ai: {
      enabled: true,
      model: 'offline-demo',
      apiUrl: '/api/ai/chat',
      maxTokens: 2000,
      offlineMode: true
    }
  })
  
  // Âú∞ÂõæÁä∂ÊÄÅ
  const mapState = reactive({
    center: [116.3974, 39.9093],
    zoom: 10,
    bearing: 0,
    pitch: 0,
    layers: [],
    activeLayers: [],
    currentTask: null
  })
  
  // Â∑•ÂÖ∑Áä∂ÊÄÅ
  const toolState = reactive({
    activeTools: [],
    taskHistory: [],
    currentSession: null
  })
  
  // ÂàùÂßãÂåñÂ∫îÁî®
  const initApp = async () => {
    try {
      console.log('üì± ÂºÄÂßãÂàùÂßãÂåñÂ∫îÁî®Áä∂ÊÄÅ...')
      setLoading(true)
      
      // Ê£ÄÊü•Áî®Êà∑ÁôªÂΩïÁä∂ÊÄÅ
      console.log('üîê Ê£ÄÊü•ËÆ§ËØÅÁä∂ÊÄÅ...')
      await checkAuthStatus()
      
      // ËÆæÁΩÆÈªòËÆ§ÈÖçÁΩÆÔºà‰∏çË∞ÉÁî®ÂèØËÉΩÂ§±Ë¥•ÁöÑAPIÔºâ
      console.log('‚öôÔ∏è Âä†ËΩΩÂ∫îÁî®ÈÖçÁΩÆ...')
      config.system.offlineMode = true
      config.system.networkStatus = 'offline'
      config.system.lastConnectAttempt = new Date()
      
      // ÂàùÂßãÂåñÂÆåÊàê
      initialized.value = true
      
      console.log('üéâ OGE Â∫îÁî®ÂàùÂßãÂåñÂÆåÊàê')
    } catch (error) {
      console.error('Â∫îÁî®ÂàùÂßãÂåñÂ§±Ë¥•:', error)
      throw error // ÈáçÊñ∞ÊäõÂá∫ÈîôËØØËÆ©‰∏äÂ±ÇÂ§ÑÁêÜ
    } finally {
      setLoading(false)
    }
  }
  
  // Ê£ÄÊü•ËÆ§ËØÅÁä∂ÊÄÅ
  const checkAuthStatus = async () => {
    const token = localStorage.getItem('oge_token')
    const username = localStorage.getItem('oge_username')
    
    if (token) {
      user.token = token
      user.username = username || ''
      user.isLoggedIn = true
      
      // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†tokenÈ™åËØÅÈÄªËæë
      try {
        // await validateToken(token)
        console.log('Áî®Êà∑Â∑≤ÁôªÂΩï:', user.username)
      } catch (error) {
        console.warn('TokenÈ™åËØÅÂ§±Ë¥•ÔºåÊ∏ÖÈô§Êú¨Âú∞ËÆ§ËØÅ‰ø°ÊÅØ')
        logout()
      }
    }
  }
  
  // ÁôªÂΩï
  const login = (userData) => {
    user.id = userData.id
    user.username = userData.username
    user.token = userData.token
    user.isLoggedIn = true
    
    // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
    localStorage.setItem('oge_token', userData.token)
    localStorage.setItem('oge_username', userData.username)
    localStorage.setItem('oge_user_id', userData.id)
    
    console.log('Áî®Êà∑ÁôªÂΩïÊàêÂäü:', user.username)
  }
  
  // ÁôªÂá∫
  const logout = () => {
    user.id = null
    user.username = ''
    user.token = ''
    user.isLoggedIn = false
    
    // Ê∏ÖÈô§Êú¨Âú∞Â≠òÂÇ®
    localStorage.removeItem('oge_token')
    localStorage.removeItem('oge_username')
    localStorage.removeItem('oge_user_id')
    
    console.log('Áî®Êà∑Â∑≤ÁôªÂá∫')
  }
  
  // Âä†ËΩΩÂ∫îÁî®ÈÖçÁΩÆ
  const loadAppConfig = async () => {
    try {
      // ËøôÈáåÂèØ‰ª•‰ªéÊúçÂä°Âô®Âä†ËΩΩÈÖçÁΩÆ
      // const response = await fetch('/api/config')
      // const serverConfig = await response.json()
      // Object.assign(config, serverConfig)
      
      console.log('Â∫îÁî®ÈÖçÁΩÆÂä†ËΩΩÂÆåÊàê')
    } catch (error) {
      console.warn('Âä†ËΩΩÂ∫îÁî®ÈÖçÁΩÆÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ:', error)
    }
  }
  
  // ËÆæÁΩÆÂä†ËΩΩÁä∂ÊÄÅ
  const setLoading = (status) => {
    loading.value = status
  }
  
  // Êõ¥Êñ∞Âú∞ÂõæÁä∂ÊÄÅ
  const updateMapState = (newState) => {
    Object.assign(mapState, newState)
  }
  
  // Ê∑ªÂä†Âú∞ÂõæÂõæÂ±Ç
  const addLayer = (layer) => {
    const existingIndex = mapState.layers.findIndex(l => l.id === layer.id)
    if (existingIndex >= 0) {
      mapState.layers[existingIndex] = layer
    } else {
      mapState.layers.push(layer)
    }
  }
  
  // ÁßªÈô§Âú∞ÂõæÂõæÂ±Ç
  const removeLayer = (layerId) => {
    const index = mapState.layers.findIndex(l => l.id === layerId)
    if (index >= 0) {
      mapState.layers.splice(index, 1)
    }
    
    // ‰ªéÊøÄÊ¥ªÂõæÂ±Ç‰∏≠ÁßªÈô§
    const activeIndex = mapState.activeLayers.indexOf(layerId)
    if (activeIndex >= 0) {
      mapState.activeLayers.splice(activeIndex, 1)
    }
  }
  
  // ÂàáÊç¢ÂõæÂ±ÇÊòæÁ§∫
  const toggleLayer = (layerId) => {
    const index = mapState.activeLayers.indexOf(layerId)
    if (index >= 0) {
      mapState.activeLayers.splice(index, 1)
    } else {
      mapState.activeLayers.push(layerId)
    }
  }
  
  // Ê∑ªÂä†‰ªªÂä°ÂéÜÂè≤
  const addTaskHistory = (task) => {
    toolState.taskHistory.unshift({
      ...task,
      id: Date.now(),
      timestamp: new Date().toISOString()
    })
    
    // ÈôêÂà∂ÂéÜÂè≤ËÆ∞ÂΩïÊï∞Èáè
    if (toolState.taskHistory.length > 100) {
      toolState.taskHistory = toolState.taskHistory.slice(0, 100)
    }
  }
  
  return {
    // Áä∂ÊÄÅ
    loading,
    initialized,
    user,
    config,
    mapState,
    toolState,
    
    // ÊñπÊ≥ï
    initApp,
    checkAuthStatus,
    login,
    logout,
    loadAppConfig,
    setLoading,
    updateMapState,
    addLayer,
    removeLayer,
    toggleLayer,
    addTaskHistory
  }
}) 